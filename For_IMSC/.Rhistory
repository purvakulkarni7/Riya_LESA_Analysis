# cat("\n This is with counter 1 \n")
print(temp)
# cat("\n matrix: temp-1", temp[,1],"temp-2", temp[,3],"\n");
to.avg <- c(temp[,1], temp[,3]);
avg<-mean(to.avg) # Take the mean of the neighbouring cells
mdata[i,j] = avg;
}
}
else # If there are consecutive -10 values
{
temp <- t(as.matrix(mdata[i,(j - 1):(j + counter)]))
# cat("\n This is with multiple count \n")
#  cat(counter,"consecutive values were found, processing accordingly \n")
print(temp);
for (k in 0:(counter-1)) # Loop to mean in a consecutive manner
{
#  cat("\n K is ",(k+1), "and array is",length(temp),"long \n")
to.avg <- c(temp[,(k+1)], temp[,length(temp)]);
cat("averaging", temp[,(k+1)],"and", temp[,length(temp)]);
avg<-mean(to.avg)
cat("\n average =",avg);
temp[,(k+2)] = avg;
mdata[i,j+k]=avg;
}
}
}
else
{
mdata[i,j] = mdata[i,j]; # Value remians unchanged if it is not -10
}
val = 1;
counter = 1;
}
}
## Generate file name and path where the new matrix wll be written
outputFilePath = paste(dirPath, "/", fileName,"Imputed.csv", sep = "")
# Note: Use forward or backward slash based on OS
## Write the matrix to the file
write.table(mdata, file = outputFilePath, sep = ",", row.names = FALSE, col.names = FALSE)
print(dim(mdata))
}
#' This function is a basic mean based imputation function to calculate values for missing data
#'
#' @title multipleMissingValueImputation.R
#' @param filePath (format *.csv)
#' @return Generates a new matrix with values for missing data and writes it to a *.csv file. The script supports rows with consecutive missing values.
## Note: The missing values in this dataset(150x210_Offset00x00_Step0_1_bigfly.csv) are marked using -10
## Date 10 June 2016
## Author: Purva Kulkarni
library(tools) # unless already loaded, comes with base R
multipleMissingValueImputation <- function(filePath)
{
## Read .csv file
fileData <-read.xlsx(filePath,1, header = FALSE, sep = ",") # Reading csv file with no headers
fileName <- file_path_sans_ext(basename(filePath)) # Gets the name of the file without extension
dirPath <- dirname(filePath) # Get the path to the directory
## Convert the .csv file to matrix class
mdata <- data.matrix(fileData)
## Creates an empty matrix of the same dimensions
#  newDataMatrix = matrix(nrow = nrow(mdata), ncol = ncol(mdata))
## Access each value of the dataMatrix, check if it -10
val = 1;
counter = 1;
temp = matrix();
for (i in 1:nrow(mdata)) # loop for rows
{
for (j in 1:ncol(mdata)) # loop for columns in a single row
{
if( j == 154 | j == 180)
{
cat("j is", j, "******", "\n");
}
if (mdata[i,j] == -10) # Find if a cell value is -10
{
while (j <= ncol(mdata))
{
if (mdata[i,j + val] == -10)
{
counter = counter + 1; # counter to keep a track of the number of -10 values
val = val + 1;
next;
}
else
{
break;
}
}
if (counter == 1) #If there is only a single -10 value
{
if (j == ncol(mdata))
{
mdata[i,j] = mdata[i,(j - 1)]/2;
}
else
{
temp <- t(as.matrix(mdata[i, (j - 1):(j + 1)]))
# cat("\n This is with counter 1 \n")
print(temp)
# cat("\n matrix: temp-1", temp[,1],"temp-2", temp[,3],"\n");
to.avg <- c(temp[,1], temp[,3]);
avg<-mean(to.avg) # Take the mean of the neighbouring cells
mdata[i,j] = avg;
}
}
else # If there are consecutive -10 values
{
temp <- t(as.matrix(mdata[i,(j - 1):(j + counter)]))
# cat("\n This is with multiple count \n")
#  cat(counter,"consecutive values were found, processing accordingly \n")
print(temp);
for (k in 0:(counter-1)) # Loop to mean in a consecutive manner
{
#  cat("\n K is ",(k+1), "and array is",length(temp),"long \n")
to.avg <- c(temp[,(k+1)], temp[,length(temp)]);
cat("averaging", temp[,(k+1)],"and", temp[,length(temp)]);
avg<-mean(to.avg)
cat("\n average =",avg);
temp[,(k+2)] = avg;
mdata[i,j+k]=avg;
}
}
}
else
{
mdata[i,j] = mdata[i,j]; # Value remians unchanged if it is not -10
}
val = 1;
counter = 1;
}
}
## Generate file name and path where the new matrix wll be written
outputFilePath = paste(dirPath, "/", fileName,"Imputed.csv", sep = "")
# Note: Use forward or backward slash based on OS
## Write the matrix to the file
write.table(mdata, file = outputFilePath, sep = ",", row.names = FALSE, col.names = FALSE)
print(dim(mdata))
}
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/Temp.xlsx")
#' This function is a basic mean based imputation function to calculate values for missing data
#'
#' @title multipleMissingValueImputation.R
#' @param filePath (format *.csv)
#' @return Generates a new matrix with values for missing data and writes it to a *.csv file. The script supports rows with consecutive missing values.
## Note: The missing values in this dataset(150x210_Offset00x00_Step0_1_bigfly.csv) are marked using -10
## Date 10 June 2016
## Author: Purva Kulkarni
library(tools) # unless already loaded, comes with base R
multipleMissingValueImputation <- function(filePath)
{
## Read .csv file
fileData <-read.xlsx(filePath,1, header = FALSE, sep = ",") # Reading csv file with no headers
fileName <- file_path_sans_ext(basename(filePath)) # Gets the name of the file without extension
dirPath <- dirname(filePath) # Get the path to the directory
## Convert the .csv file to matrix class
mdata <- data.matrix(fileData)
## Creates an empty matrix of the same dimensions
#  newDataMatrix = matrix(nrow = nrow(mdata), ncol = ncol(mdata))
## Access each value of the dataMatrix, check if it -10
val = 1;
counter = 1;
temp = matrix();
for (i in 1:nrow(mdata)) # loop for rows
{
for (j in 1:ncol(mdata)) # loop for columns in a single row
{
if( j == 154 | j == 180)
{
cat("j is", j, "******", "\n");
}
if (mdata[i,j] == -10) # Find if a cell value is -10
{
while (j <= ncol(mdata))
{
if (mdata[i,j + val] == -10)
{
counter = counter + 1; # counter to keep a track of the number of -10 values
val = val + 1;
next;
}
else
{
break;
}
}
if (counter == 1) #If there is only a single -10 value
{
temp <- t(as.matrix(mdata[i, (j - 1):(j + 1)]))
# cat("\n This is with counter 1 \n")
print(temp)
# cat("\n matrix: temp-1", temp[,1],"temp-2", temp[,3],"\n");
to.avg <- c(temp[,1], temp[,3]);
avg<-mean(to.avg) # Take the mean of the neighbouring cells
mdata[i,j] = avg;
}
else # If there are consecutive -10 values
{
temp <- t(as.matrix(mdata[i,(j - 1):(j + counter)]))
# cat("\n This is with multiple count \n")
#  cat(counter,"consecutive values were found, processing accordingly \n")
print(temp);
for (k in 0:(counter-1)) # Loop to mean in a consecutive manner
{
#  cat("\n K is ",(k+1), "and array is",length(temp),"long \n")
to.avg <- c(temp[,(k+1)], temp[,length(temp)]);
cat("averaging", temp[,(k+1)],"and", temp[,length(temp)]);
avg<-mean(to.avg)
cat("\n average =",avg);
temp[,(k+2)] = avg;
mdata[i,j+k]=avg;
}
}
}
else
{
mdata[i,j] = mdata[i,j]; # Value remians unchanged if it is not -10
}
val = 1;
counter = 1;
}
}
## Generate file name and path where the new matrix wll be written
outputFilePath = paste(dirPath, "/", fileName,"Imputed.csv", sep = "")
# Note: Use forward or backward slash based on OS
## Write the matrix to the file
write.table(mdata, file = outputFilePath, sep = ",", row.names = FALSE, col.names = FALSE)
print(dim(mdata))
}
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-05.csv")
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-05.csv")
#' This function is a basic mean based imputation function to calculate values for missing data
#'
#' @title multipleMissingValueImputation.R
#' @param filePath (format *.csv)
#' @return Generates a new matrix with values for missing data and writes it to a *.csv file. The script supports rows with consecutive missing values.
## Note: The missing values in this dataset(150x210_Offset00x00_Step0_1_bigfly.csv) are marked using -10
## Date 10 June 2016
## Author: Purva Kulkarni
library(tools) # unless already loaded, comes with base R
multipleMissingValueImputation <- function(filePath)
{
## Read .csv file
fileData <-read.xlsx(filePath,1, header = FALSE, sep = ",") # Reading csv file with no headers
fileName <- file_path_sans_ext(basename(filePath)) # Gets the name of the file without extension
dirPath <- dirname(filePath) # Get the path to the directory
## Convert the .csv file to matrix class
mdata <- data.matrix(fileData)
## Creates an empty matrix of the same dimensions
#  newDataMatrix = matrix(nrow = nrow(mdata), ncol = ncol(mdata))
## Access each value of the dataMatrix, check if it -10
val = 1;
counter = 1;
temp = matrix();
for (i in 1:nrow(mdata)) # loop for rows
{
for (j in 1:ncol(mdata)) # loop for columns in a single row
{
if( j == 154 | j == 180)
{
cat("j is", j, "******", "\n");
}
if (mdata[i,j] == -10) # Find if a cell value is -10
{
while (j <= ncol(mdata))
{
if (mdata[i,j + val] == -10)
{
counter = counter + 1; # counter to keep a track of the number of -10 values
val = val + 1;
next;
}
else
{
break;
}
}
if (counter == 1) #If there is only a single -10 value
{
temp <- t(as.matrix(mdata[i, (j - 1):(j + 1)]))
# cat("\n This is with counter 1 \n")
print(temp)
# cat("\n matrix: temp-1", temp[,1],"temp-2", temp[,3],"\n");
to.avg <- c(temp[,1], temp[,3]);
avg<-mean(to.avg) # Take the mean of the neighbouring cells
mdata[i,j] = avg;
}
else # If there are consecutive -10 values
{
temp <- t(as.matrix(mdata[i,(j - 1):(j + counter)]))
# cat("\n This is with multiple count \n")
#  cat(counter,"consecutive values were found, processing accordingly \n")
print(temp);
for (k in 0:(counter-1)) # Loop to mean in a consecutive manner
{
#  cat("\n K is ",(k+1), "and array is",length(temp),"long \n")
to.avg <- c(temp[,(k+1)], temp[,length(temp)]);
cat("averaging", temp[,(k+1)],"and", temp[,length(temp)]);
avg<-mean(to.avg)
cat("\n average =",avg);
temp[,(k+2)] = avg;
mdata[i,j+k]=avg;
}
}
}
else
{
mdata[i,j] = mdata[i,j]; # Value remians unchanged if it is not -10
}
val = 1;
counter = 1;
}
}
## Generate file name and path where the new matrix wll be written
outputFilePath = paste(dirPath, "/", fileName,"Imputed.csv", sep = "")
# Note: Use forward or backward slash based on OS
## Write the matrix to the file
write.table(mdata, file = outputFilePath, sep = ",", row.names = FALSE, col.names = FALSE)
print(dim(mdata))
}
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-05.csv")
#' This function is a basic mean based imputation function to calculate values for missing data
#'
#' @title multipleMissingValueImputation.R
#' @param filePath (format *.csv)
#' @return Generates a new matrix with values for missing data and writes it to a *.csv file. The script supports rows with consecutive missing values.
## Note: The missing values in this dataset(150x210_Offset00x00_Step0_1_bigfly.csv) are marked using -10
## Date 10 June 2016
## Author: Purva Kulkarni
library(tools) # unless already loaded, comes with base R
multipleMissingValueImputation <- function(filePath)
{
## Read .csv file
fileData <-read.csv(filePath, header = FALSE) # Reading csv file with no headers
fileName <- file_path_sans_ext(basename(filePath)) # Gets the name of the file without extension
dirPath <- dirname(filePath) # Get the path to the directory
## Convert the .csv file to matrix class
mdata <- data.matrix(fileData)
## Creates an empty matrix of the same dimensions
#  newDataMatrix = matrix(nrow = nrow(mdata), ncol = ncol(mdata))
## Access each value of the dataMatrix, check if it -10
val = 1;
counter = 1;
temp = matrix();
for (i in 1:nrow(mdata)) # loop for rows
{
for (j in 1:ncol(mdata)) # loop for columns in a single row
{
if( j == 154 | j == 180)
{
cat("j is", j, "******", "\n");
}
if (mdata[i,j] == -10) # Find if a cell value is -10
{
while (j <= ncol(mdata))
{
if (mdata[i,j + val] == -10)
{
counter = counter + 1; # counter to keep a track of the number of -10 values
val = val + 1;
next;
}
else
{
break;
}
}
if (counter == 1) #If there is only a single -10 value
{
temp <- t(as.matrix(mdata[i, (j - 1):(j + 1)]))
# cat("\n This is with counter 1 \n")
print(temp)
# cat("\n matrix: temp-1", temp[,1],"temp-2", temp[,3],"\n");
to.avg <- c(temp[,1], temp[,3]);
avg<-mean(to.avg) # Take the mean of the neighbouring cells
mdata[i,j] = avg;
}
else # If there are consecutive -10 values
{
temp <- t(as.matrix(mdata[i,(j - 1):(j + counter)]))
# cat("\n This is with multiple count \n")
#  cat(counter,"consecutive values were found, processing accordingly \n")
print(temp);
for (k in 0:(counter-1)) # Loop to mean in a consecutive manner
{
#  cat("\n K is ",(k+1), "and array is",length(temp),"long \n")
to.avg <- c(temp[,(k+1)], temp[,length(temp)]);
cat("averaging", temp[,(k+1)],"and", temp[,length(temp)]);
avg<-mean(to.avg)
cat("\n average =",avg);
temp[,(k+2)] = avg;
mdata[i,j+k]=avg;
}
}
}
else
{
mdata[i,j] = mdata[i,j]; # Value remians unchanged if it is not -10
}
val = 1;
counter = 1;
}
}
## Generate file name and path where the new matrix wll be written
outputFilePath = paste(dirPath, "/", fileName,"Imputed.csv", sep = "")
# Note: Use forward or backward slash based on OS
## Write the matrix to the file
write.table(mdata, file = outputFilePath, sep = ",", row.names = FALSE, col.names = FALSE)
print(dim(mdata))
}
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-05.csv")
fileData <- read.csv("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-05.csv", header = FALSE)
class(fileData[1,152])
class(mdata)
dim(mdata)
i = 1
j = 154
source('~/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/multipleMissingValueImputation.R', echo=TRUE)
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-052.csv")
source('~/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/multipleMissingValueImputation.R', echo=TRUE)
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-052.csv")
multipleMissingValueImputation("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Bens_LAESI_Data/bigfruitfly_320x460_Step0-05.csv")
library(MALDIquant)
demo(MALDIQuant)
demo(‘‘MALDIquant’’)
library(‘‘MALDIquant’’)
setwd("/Users/localadm/PhD_Work/Server/Lab_proceedings_Current_Folder/Work/Riya_LESA_Analysis/For_IMSC/")
ls
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
library(xcms)
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgNEG<-group(xsetNEG, method="density", bw = 10)
xsgNEG <- retcor(xsgNEG, method="obiwarp")
xsgNEG <- group(xsgNEG)
xsgNEG <- fillPeaks(xsgNEG)
datNEG <- groupval(xsgNEG, "medret", "into")
datNEG <- rbind(group = as.character(phenoData(xsgNEG)$class), datNEG)
write.csv(datNEG, file = "Peaks_Matrix_DataNEG.csv")
dataPOS <- list.files('./DataPOS/‘, recursive = TRUE, full=T)
dataPOS <- list.files('./DataPOS/‘, recursive = TRUE, full=T)
dataPOS <- list.files('./DataPOS/', recursive = TRUE, full=T)
xsetPOS <- xcmsSet(dataPOS, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgPOS<-group(xsetPOS, method="density", bw = 10)
xsgPOS <- retcor(xsgPOS, method="obiwarp")
xsgPOS <- group(xsgPOS)
xsgPOS <- fillPeaks(xsgPOS)
datPOS <- groupval(xsgPOS, "medret", "into")
datPOS <- rbind(group = as.character(phenoData(xsgPOS)$class), datPOS)
write.csv(datPOS, file = "Peaks_Matrix_DataPOS.csv")
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgNEG<-group(xsetNEG, method="density", bw = 10)
xsgNEG <- retcor(xsgNEG, method="obiwarp")
xsgNEG <- group(xsgNEG)
xsgNEG <- fillPeaks(xsgNEG)
datNEG <- groupval(xsgNEG, "medret", "into")
datNEG <- rbind(group = as.character(phenoData(xsgNEG)$class), datNEG)
write.csv(datNEG, file = "Peaks_Matrix_DataNEG.csv")
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgNEG<-group(xsetNEG, method="density", bw = 10)
xsgNEG <- retcor(xsgNEG, method="obiwarp")
xsgNEG <- group(xsgNEG)
xsgNEG <- fillPeaks(xsgNEG)
datNEG <- groupval(xsgNEG, "medret", "into")
datNEG <- rbind(group = as.character(phenoData(xsgNEG)$class), datNEG)
write.csv(datNEG, file = "Peaks_Matrix_DataNEG.csv")
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgNEG<-group(xsetNEG, method="density", bw = 10)
xsgNEG <- retcor(xsgNEG, method="obiwarp")
xsgNEG <- group(xsgNEG)
xsgNEG <- fillPeaks(xsgNEG)
datNEG <- groupval(xsgNEG, "medret", "into")
datNEG <- rbind(group = as.character(phenoData(xsgNEG)$class), datNEG)
write.csv(datNEG, file = "Peaks_Matrix_DataNEG.csv")
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgNEG<-group(xsetNEG, method="density", bw = 10)
xsgNEG <- retcor(xsgNEG, method="obiwarp")
xsgNEG <- group(xsgNEG)
xsgNEG <- fillPeaks(xsgNEG)
datNEG <- groupval(xsgNEG, "medret", "into")
datNEG <- rbind(group = as.character(phenoData(xsgNEG)$class), datNEG)
write.csv(datNEG, file = "Peaks_Matrix_DataNEG.csv")
dataPOS <- list.files('./DataPOS/', recursive = TRUE, full=T)
xsetPOS <- xcmsSet(dataPOS, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgPOS<-group(xsetPOS, method="density", bw = 10)
xsgPOS <- retcor(xsgPOS, method="obiwarp")
xsgPOS <- group(xsgPOS)
xsgPOS <- fillPeaks(xsgPOS)
datPOS <- groupval(xsgPOS, "medret", "into")
datPOS <- rbind(group = as.character(phenoData(xsgPOS)$class), datPOS)
write.csv(datPOS, file = "Peaks_Matrix_DataPOS.csv")
dataNEG <- list.files('./DataNEG/', recursive = TRUE, full=T)
xsetNEG <- xcmsSet(dataNEG, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgNEG<-group(xsetNEG, method="density", bw = 10)
xsgNEG <- retcor(xsgNEG, method="obiwarp")
xsgNEG <- group(xsgNEG)
xsgNEG <- fillPeaks(xsgNEG)
datNEG <- groupval(xsgNEG, "medret", "into")
datNEG <- rbind(group = as.character(phenoData(xsgNEG)$class), datNEG)
write.csv(datNEG, file = "Peaks_Matrix_DataNEG.csv")
dataPOS <- list.files('./DataPOS/', recursive = TRUE, full=T)
xsetPOS <- xcmsSet(dataPOS, method = 'centWave', ppm = 5, peakwidth = c(5,15))
xsgPOS<-group(xsetPOS, method="density", bw = 10)
xsgPOS <- retcor(xsgPOS, method="obiwarp")
xsgPOS <- group(xsgPOS)
xsgPOS <- fillPeaks(xsgPOS)
datPOS <- groupval(xsgPOS, "medret", "into")
datPOS <- rbind(group = as.character(phenoData(xsgPOS)$class), datPOS)
write.csv(datPOS, file = "Peaks_Matrix_DataPOS.csv")
